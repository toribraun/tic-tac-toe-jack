class Game {
    static Board board;

    function void init() {
		do MessageHandler.init();
		return;
	}

    function int takeAStep(boolean isCross) {
        var boolean stepIsCorrect;
        var int row, column;
        let stepIsCorrect = false;
        while (~stepIsCorrect) {
            let row = MessageHandler.readDigitInput("Press number of row you want to take step");
            let column = MessageHandler.readDigitInput("Press number of column you want to take step");
            let stepIsCorrect = board.isCellFree(row - 1, column - 1);
        }
        do board.drawMove(row, column, isCross);
        if (board.isRowWin(row)) {
            do board.drawWinRow(row);
            do MessageHandler.readDigitInput("Win");
        }
        if (board.isColumnWin(column)) {
            do board.drawWinColumn(column);
            do MessageHandler.readDigitInput("Win");
        }
        if (board.isMainDiagonalWin(row, column)) {
            do board.drawWinMainDiagonal();
            do MessageHandler.readDigitInput("Win");
        }
        if (board.isAntiDiagonalWin(row, column)) {
            do board.drawWinAntiDiagonal();
            do MessageHandler.readDigitInput("Win");
        }
        return 0;
    }

    method void startGame() {
        var int boardSize, stepResult;
        var boolean gameOver, isCross;
        while (true) {
            let boardSize = MessageHandler.readDigitInput("Press number of board size and start!");
            let board = Board.new(boardSize);
            do board.drawBoard();
            let gameOver = false;
            let isCross = true;
            while (~gameOver) {
                let stepResult = Game.takeAStep(isCross);
                let isCross = ~isCross;
            }
        }
        return;
    }
}
