class Game {
    static Board board;

    function void init() {
		do MessageHandler.init();
		return;
	}

    method boolean isRowWin(int row) {
		var int i, boardSize;
		var boolean isCrossFirst;
        var Array boardArray;
        let boardSize = board.getBoardSize();
        let boardArray = board.getBoardArray();
		let i = 0;
		let row = row - 1;
        
		let isCrossFirst = (boardArray[row*boardSize] = 1);

		while (i < boardSize) {
			if ((isCrossFirst & ~(boardArray[row*boardSize+i] = 1)) | 
				(~isCrossFirst & ~(boardArray[row*boardSize+i] = 2))) {
				return false;
			} 
			let i = i + 1;
		}
        do board.drawWinRow(row + 1);
		return true;
	}

	method boolean isColumnWin(int column) {
		var int i, boardSize;
		var boolean isCrossFirst;
        var Array boardArray;
        let boardSize = board.getBoardSize();
        let boardArray = board.getBoardArray();
		let i = 0;
		let column = column - 1;
		let isCrossFirst = (boardArray[column] = 1);

		while (i < boardSize) {
			if ((isCrossFirst & ~(boardArray[i*boardSize+column] = 1)) | 
				(~isCrossFirst & ~(boardArray[i*boardSize+column] = 2))) {
				return false;
			} 
			let i = i + 1;
		}
        do board.drawWinColumn(column + 1);
		return true;
	}

	method boolean isMainDiagonalWin(int row, int column) {
		var int i, boardSize;
		var boolean isCrossFirst;
        var Array boardArray;
        let boardSize = board.getBoardSize();
        let boardArray = board.getBoardArray();
		let i = 0;
		let row = row - 1;
		let column = column - 1;
		let isCrossFirst = (boardArray[0] = 1);

		if (~(row = column)) {
			return false;
		}

		while (i < boardSize) {
			if ((isCrossFirst & ~(boardArray[i*boardSize+i] = 1)) | 
				(~isCrossFirst & ~(boardArray[i*boardSize+i] = 2))) {
				return false;
			} 
			let i = i + 1;
		}
        do board.drawWinMainDiagonal();
		return true;
	}

	method boolean isAntiDiagonalWin(int row, int column) {
		var int i, boardSize;
		var boolean isCrossFirst;
        var Array boardArray;
        let boardSize = board.getBoardSize();
        let boardArray = board.getBoardArray();
		let i = 0;
		let row = row - 1;
		let column = column - 1;
		let isCrossFirst = (boardArray[boardSize-1] = 1);

		if (~(row = boardSize-column-1)) {
			return false;
		}

		while (i < boardSize) {
			if ((isCrossFirst & ~(boardArray[i*boardSize+boardSize-i-1] = 1)) |
				(~isCrossFirst & ~(boardArray[i*boardSize+boardSize-i-1] = 2))) {
				return false;
			} 
			let i = i + 1;
		}
        do board.drawWinAntiDiagonal();
		return true;
	}

    method int isWin(int row, int column) {
        if (isAntiDiagonalWin(row, column) | isMainDiagonalWin(row, column) | isColumnWin(column) | isRowWin(row)) {
            return 1;
        }
        return 0;
    }

    method int takeAStep(boolean isCross) {
        var boolean stepIsCorrect;
        var int row, column;
        let stepIsCorrect = false;
        while (~stepIsCorrect) {
            let row = MessageHandler.readDigitInput("Press number of row you want to take step or 0 to restart");
            if (row=0) {
                return 2;
            }
            let column = MessageHandler.readDigitInput("Press number of column you want to take step or 0 to restart");
            if (column=0) {
                return 2;
            }
            let stepIsCorrect = board.isCellFree(row - 1, column - 1);
        }
        do board.drawMove(row, column, isCross);
        return isWin(row, column);
    }

    method void startGame() {
        var int stepResult, boardSize;
        var boolean gameOver, isCross;
        while (true) {
            let boardSize = MessageHandler.readDigitInput("Press number of board size and start!");
            let board = Board.new(boardSize);
            do board.drawBoard();
            let gameOver = false;
            let isCross = true;
            while (~gameOver) {
                let stepResult = takeAStep(isCross);
                if (stepResult=2) {
                    let gameOver = true;
                }
                if (stepResult=1) {
                    let gameOver = true;
                    do MessageHandler.readEnterInput("Win! Press ENTER to start new game!");
                }

                if ((stepResult=0) & (board.isFieldOccupied())) {
                    let gameOver = true;
                    do MessageHandler.readEnterInput("Dead heat! Press ENTER to start new game!");
                }
                let isCross = ~isCross;
            }
            do board.clearBoard();
        }
        return;
    }
}
